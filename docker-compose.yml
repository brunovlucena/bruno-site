services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio-postgres
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: portfolio_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./portfolio-api/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Portfolio API Backend
  portfolio-api:
    build:
      context: ./portfolio-api
      dockerfile: Dockerfile
    container_name: portfolio-api
    environment:
      - DATABASE_URL=postgresql://portfolio_user:portfolio_password@postgres:5432/portfolio?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - PORT=8080
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Portfolio Frontend (React)
  portfolio-frontend:
    build:
      context: ./portfolio-frontend
      dockerfile: Dockerfile.dev
    container_name: portfolio-frontend
    environment:
      - VITE_API_URL=http://localhost:8080
      - VITE_APP_ENV=development
    ports:
      - "3000:3000"
    depends_on:
      portfolio-api:
        condition: service_healthy
    networks:
      - portfolio-network
    volumes:
      - ./portfolio-frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: portfolio-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./k8s/prometheus-config.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - portfolio-network

  # Grafana - Unified observability dashboard (metrics + traces)
  grafana:
    image: grafana/grafana:latest
    container_name: portfolio-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Admin password
      - GF_USERS_ALLOW_SIGN_UP=false      # Disable public signups
    ports:
      - "3002:3000"  # Grafana web interface
    volumes:
      - grafana_data:/var/lib/grafana                                    # Persistent storage
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml  # Auto-configure data sources
    networks:
      - portfolio-network
    depends_on:
      - prometheus  # Wait for Prometheus to be ready
      - tempo       # Wait for Tempo to be ready

  # Loki (Log Aggregation)
  loki:
    image: grafana/loki:latest
    container_name: portfolio-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - portfolio-network

  # OpenTelemetry Collector - Receives and processes traces from applications
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: portfolio-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml  # Mount config file
    ports:
      - "4317:4317"   # OTLP gRPC endpoint - applications send traces here
    depends_on:
      - tempo  # Wait for Tempo to be ready
    networks:
      - portfolio-network

  # Tempo - Modern distributed tracing backend (replaces Jaeger)
  tempo:
    image: grafana/tempo:latest
    container_name: portfolio-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml  # Mount config file
      - tempo_data:/var/tempo                # Persistent storage for traces
    ports:
      - "3200:3200"   # Tempo HTTP API - for queries and health checks
      - "9095:9095"   # Tempo gRPC - collector sends traces here
    networks:
      - portfolio-network

volumes:
  postgres_data:    # PostgreSQL database storage
  redis_data:       # Redis cache storage
  prometheus_data:  # Prometheus metrics storage
  grafana_data:     # Grafana dashboards and settings
  tempo_data:       # Tempo trace storage

networks:
  portfolio-network:
    driver: bridge