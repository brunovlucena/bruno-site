services:
  # üõ°Ô∏è SECURITY: All database ports are now restricted to localhost (127.0.0.1) only
  # This prevents external access to PostgreSQL and Redis databases
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: bruno-postgres
    environment:
      POSTGRES_DB: bruno_site
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # üõ°Ô∏è SECURITY: Restrict PostgreSQL to localhost only
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - bruno-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d bruno_site"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:8.2-alpine
    container_name: bruno-redis
    command: redis-server --bind 127.0.0.1 --protected-mode yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bruno-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Migration Service
  db-migrate:
    image: postgres:17-alpine
    container_name: bruno-db-migrate
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./api/migrations:/migrations
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...'
        until pg_isready -h postgres -p 5432 -U postgres; do
          echo 'PostgreSQL is not ready yet. Waiting...'
          sleep 2
        done
        echo 'PostgreSQL is ready. Running migrations...'
        psql -h postgres -p 5432 -U postgres -d bruno_site -f /migrations/001_complete_schema.sql
        echo 'Migrations completed successfully!'
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bruno-network
    restart: "no"

  # Bruno Site API Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    container_name: bruno-api
    environment:
      # üõ°Ô∏è SECURITY: Environment and CORS configuration
      - APP_ENV=development
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000,http://127.0.0.1:8080
      # Database and services
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/bruno_site?sslmode=disable
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379
      - PORT=8080
      - GEMMA_MODEL=gemma3n:e4b
      - OLLAMA_URL=http://192.168.0.3:11434
      - METRICS_USERNAME=${METRICS_USERNAME}
      - METRICS_PASSWORD=${METRICS_PASSWORD}
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    networks:
      - bruno-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Bruno Site Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: bruno-frontend
    environment:
      # üåê Frontend API base URL - configures where the React app makes API calls to the backend
      - VITE_API_URL=/api
      - VITE_APP_ENV=development
    ports:
      - "127.0.0.1:3000:8080"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - bruno-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:    # PostgreSQL database storage
  redis_data:       # Redis cache storage

networks:
  bruno-network:
    driver: bridge