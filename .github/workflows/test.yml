name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # API Tests
  test-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: secure-password
          POSTGRES_DB: bruno_site_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install dependencies
        run: |
          cd api
          go mod download
          go mod verify

      - name: Run API unit tests
        run: |
          cd api
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: Upload API coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.out
          flags: api
          name: api-coverage

      - name: Run API integration tests
        run: |
          cd api
          go test -v -tags=integration ./...
        env:
          DATABASE_URL: postgres://postgres:secure-password@localhost:5432/bruno_site_test?sslmode=disable
          REDIS_URL: redis://localhost:6379

  # Frontend Tests
  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test -- --run --coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E Tests
  test-e2e:
    runs-on: ubuntu-latest
    needs: [test-api, test-frontend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Start services for E2E tests
        run: |
          docker-compose up -d postgres redis
          sleep 10

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e
        env:
          DATABASE_URL: postgres://postgres:secure-password@localhost:5432/bruno_site_test?sslmode=disable
          REDIS_URL: redis://localhost:6379

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # Load Tests
  test-load:
    runs-on: ubuntu-latest
    needs: [test-api, test-frontend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up k6
        uses: grafana/k6-action@v0.3.0
        with:
          filename: tests/k6/load-test.js
          flags: --out json=results.json

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: k6-results
          path: results.json
          retention-days: 30

  # Security Tests
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [test-api, test-frontend, test-e2e, test-load, security-scan]
    if: always()

    steps:
      - name: Test Summary
        run: |
          echo "üéâ Test Suite Summary"
          echo "===================="
          echo "‚úÖ API Tests: ${{ needs.test-api.result }}"
          echo "‚úÖ Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "‚úÖ E2E Tests: ${{ needs.test-e2e.result }}"
          echo "‚úÖ Load Tests: ${{ needs.test-load.result }}"
          echo "‚úÖ Security Scan: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.test-api.result }}" == "failure" ]] || \
             [[ "${{ needs.test-frontend.result }}" == "failure" ]] || \
             [[ "${{ needs.test-e2e.result }}" == "failure" ]] || \
             [[ "${{ needs.test-load.result }}" == "failure" ]]; then
            echo "‚ùå Some tests failed!"
            exit 1
          else
            echo "üéâ All tests passed!"
          fi
