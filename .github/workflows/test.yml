name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: secure-password
          POSTGRES_DB: bruno_site_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: api/go.sum

      - name: Setup PostgreSQL
        uses: Harmon758/postgresql-action@v1.0.0
        with:
          postgresql version: '16'
          postgresql db: bruno_site_test
          postgresql user: postgres
          postgresql password: ${{ secrets.POSTGRES_PASSWORD || 'secure-password' }}

      - name: Run API Tests
        env:
          DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD || 'secure-password' }}@localhost:5432/bruno_site_test?sslmode=disable
          TEST_DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD || 'secure-password' }}@localhost:5432/bruno_site_test?sslmode=disable
          METRICS_USERNAME: ${{ secrets.METRICS_USERNAME || 'admin' }}
          METRICS_PASSWORD: ${{ secrets.METRICS_PASSWORD || 'secure_password_change_me' }}
        run: |
          cd api
          go mod download
          go test -v -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.out
          flags: api

  test-frontend:
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Run Frontend Tests
        env:
          DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD || 'secure-password' }}@localhost:5432/bruno_site_test?sslmode=disable
          TEST_DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD || 'secure-password' }}@localhost:5432/bruno_site_test?sslmode=disable
          METRICS_USERNAME: ${{ secrets.METRICS_USERNAME || 'admin' }}
          METRICS_PASSWORD: ${{ secrets.METRICS_PASSWORD || 'secure_password_change_me' }}
        run: |
          cd frontend
          npm ci
          npm run test -- --run --reporter=verbose

      - uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
        continue-on-error: true

  test-e2e:
    runs-on: ubuntu-latest
    needs: [test-api, test-frontend]
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - run: |
          cd frontend
          npm ci --legacy-peer-deps
          npx playwright install --with-deps
          docker-compose up -d postgres redis
          sleep 10
          echo "E2E tests temporarily disabled - skipping test execution"
          # cd ../tests/e2e
          # npx playwright test
        env:
          DATABASE_URL: postgres://postgres:secure-password@localhost:5432/bruno_site_test?sslmode=disable
          REDIS_URL: redis://localhost:6379

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: tests/e2e/playwright-report/
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

      - uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
