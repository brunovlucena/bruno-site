name: 🔒 Security Vulnerability Scanning

on:
  # Regular scheduled scanning
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  # Manual trigger
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - containers
          - dependencies
          - code
          - secrets
  # On code changes
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Container vulnerability scanning
  container-scan:
    name: 🔍 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'containers' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image for scanning
        run: |
          docker build -t bruno-site-api:scan ./api
          docker build -t bruno-site-frontend:scan ./frontend

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bruno-site-api:scan'
          format: 'sarif'
          output: 'trivy-results-api.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bruno-site-frontend:scan'
          format: 'sarif'
          output: 'trivy-results-frontend.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-api.sarif'

      - name: Upload Trivy scan results to GitHub Security tab (Frontend)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-frontend.sarif'

  # Dependency vulnerability scanning
  dependency-scan:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install Go dependencies
        run: |
          cd api
          go mod download
          go mod verify

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=frontend/package.json

      - name: Run Snyk to check for vulnerabilities (Go)
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=api/go.mod

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # Code security analysis
  code-scan:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install GoSec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run GoSec security scanner
        run: |
          cd api
          gosec -fmt=sarif -out=../gosec-results.sarif ./...

      - name: Upload GoSec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gosec-results.sarif'

      - name: Run ESLint security rules
        run: |
          cd frontend
          npm ci
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ../eslint-security-results.json || true

      - name: Run Bandit for Python security (if any Python files exist)
        run: |
          if find . -name "*.py" | grep -q .; then
            pip install bandit
            bandit -r . -f json -o bandit-results.json || true
          else
            echo "No Python files found, skipping Bandit scan"
          fi

  # Secrets scanning
  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: HEAD
          head: HEAD
          extra_args: --only-verified --fail

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

  # Security report generation
  security-report:
    name: 📊 Generate Security Report
    runs-on: ubuntu-latest
    needs: [container-scan, dependency-scan, code-scan, secrets-scan]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          echo "🔒 Security Scan Summary" > security-scan-summary.md
          echo "=========================" >> security-scan-summary.md
          echo "" >> security-scan-summary.md
          echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security-scan-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-scan-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-scan-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-scan-summary.md
          echo "" >> security-scan-summary.md
          echo "## Scan Results" >> security-scan-summary.md
          echo "" >> security-scan-summary.md
          echo "### Container Security" >> security-scan-summary.md
          echo "- Status: ${{ needs.container-scan.result }}" >> security-scan-summary.md
          echo "- Job ID: ${{ needs.container-scan.outputs.job-id }}" >> security-scan-summary.md
          echo "" >> security-scan-summary.md
          echo "### Dependency Security" >> security-scan-summary.md
          echo "- Status: ${{ needs.dependency-scan.result }}" >> security-scan-summary.md
          echo "- Job ID: ${{ needs.dependency-scan.outputs.job-id }}" >> security-scan-summary.md
          echo "" >> security-scan-summary.md
          echo "### Code Security" >> security-scan-summary.md
          echo "- Status: ${{ needs.code-scan.result }}" >> security-scan-summary.md
          echo "- Job ID: ${{ needs.code-scan.outputs.job-id }}" >> security-scan-summary.md
          echo "" >> security-scan-summary.md
          echo "### Secrets Detection" >> security-scan-summary.md
          echo "- Status: ${{ needs.secrets-scan.result }}" >> security-scan-summary.md
          echo "- Job ID: ${{ needs.secrets-scan.outputs.job-id }}" >> security-scan-summary.md
          echo "" >> security-scan-summary.md
          echo "## Next Steps" >> security-scan-summary.md
          echo "1. Review any detected vulnerabilities in the GitHub Security tab" >> security-scan-summary.md
          echo "2. Address critical and high severity issues immediately" >> security-scan-summary.md
          echo "3. Update dependencies with known vulnerabilities" >> security-scan-summary.md
          echo "4. Review and fix any exposed secrets" >> security-scan-summary.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-report
          path: security-scan-summary.md
          retention-days: 30

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-scan-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Security alerts
  security-alerts:
    name: 🚨 Security Alerts
    runs-on: ubuntu-latest
    needs: [container-scan, dependency-scan, code-scan, secrets-scan]
    if: always() && (needs.container-scan.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.code-scan.result == 'failure' || needs.secrets-scan.result == 'failure')
    
    steps:
      - name: Send security alert
        run: |
          echo "🚨 SECURITY ALERT: Vulnerabilities detected in security scan!"
          echo "Please review the scan results and address any critical issues immediately."
          echo "Check the GitHub Security tab for detailed vulnerability information."
          
          # Exit with error to mark the workflow as failed
          exit 1
