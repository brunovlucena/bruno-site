{{- if .Values.postgres.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: {{ .Values.namespaces.portfolio.name }}
  labels:
    app: postgres
spec:
  replicas: {{ .Values.postgres.replicaCount }}
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        {{- toYaml .Values.postgres.securityContext | nindent 8 }}
      containers:
      - name: postgres
        image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.postgres.service.targetPort }}
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: portfolio-config
              key: db_name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: portfolio-secrets
              key: db_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: portfolio-secrets
              key: db_password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          {{- toYaml .Values.postgres.resources | nindent 10 }}
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        {{- if .Values.postgres.persistence.enabled }}
        persistentVolumeClaim:
          claimName: postgres-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- if .Values.postgres.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: {{ .Values.namespaces.portfolio.name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgres.persistence.size }}
  {{- if .Values.postgres.persistence.storageClass }}
  storageClassName: {{ .Values.postgres.persistence.storageClass }}
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: {{ .Values.namespaces.portfolio.name }}
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: {{ .Values.postgres.service.port }}
    targetPort: {{ .Values.postgres.service.targetPort }}
    protocol: TCP
    name: postgres
  type: {{ .Values.postgres.service.type }}
{{- end }}
