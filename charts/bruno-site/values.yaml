# Default values for portfolio chart
# This is a YAML-formatted file.

# Global configuration
global:
  environment: studio
  domain: brunolucena.dev
  imageRegistry: brunovlucena
  imagePullPolicy: IfNotPresent

# Namespace configuration
namespaces:
  portfolio:
    create: true
    name: bruno-site
    labels:
      name: bruno-site
      app: bruno-site

# Portfolio API configuration
api:
  enabled: true
  image:
    repository: bruno-site-api
    tag: latest
    pullPolicy: IfNotPresent
  replicaCount: 1
  # resources:
  #   requests:
  #     memory: "128Mi"
  #     cpu: "100m"
  #   limits:
  #     memory: "512Mi"
  #     cpu: "500m"
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    capabilities:
      drop:
        - ALL

# Portfolio Frontend configuration
frontend:
  enabled: true
  image:
    repository: bruno-site-frontend
    tag: latest
    pullPolicy: IfNotPresent
  replicaCount: 1
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "50m"
  #   limits:
  #     memory: "256Mi"
  #     cpu: "200m"
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  livenessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    capabilities:
      drop:
        - ALL

# PostgreSQL Database configuration
postgres:
  enabled: true
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  replicaCount: 1
  # resources:
  #   requests:
  #     memory: "256Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "1Gi"
  #     cpu: "500m"
  service:
    type: ClusterIP
    port: 5432
    targetPort: 5432
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
  securityContext:
    runAsUser: 1001
    fsGroup: 1001

# Redis configuration
redis:
  enabled: true
  image:
    repository: redis
    tag: "7-alpine"
    pullPolicy: IfNotPresent
  replicaCount: 1
  # resources:
  #   requests:
  #     memory: "128Mi"
  #     cpu: "100m"
  #   limits:
  #     memory: "256Mi"
  #     cpu: "200m"
  service:
    type: ClusterIP
    port: 6379
    targetPort: 6379
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""
  securityContext:
    runAsUser: 999
    fsGroup: 999

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
  tls:
    enabled: true
    secretName: portfolio-tls
    hosts:
      - portfolio.brunolucena.dev
      - api.portfolio.brunolucena.dev
  hosts:
    - host: portfolio.brunolucena.dev
      paths:
        - path: /
          pathType: Prefix
          serviceName: portfolio-frontend-service
          servicePort: 80
    - host: api.portfolio.brunolucena.dev
      paths:
        - path: /
          pathType: Prefix
          serviceName: portfolio-api-service
          servicePort: 80

# Configuration and Secrets
config:
  database:
    host: "postgres-service"
    port: "5432"
    name: "portfolio"
  redis:
    host: "redis-service"
    port: "6379"
    db: "0"
  api:
    port: "8080"
    debug: "false"
    apiUrl: "https://api.portfolio.brunolucena.dev"

secrets:
  database:
    user: "postgres"
    password: "secure-password"
  jwt:
    secret: "your-jwt-secret-key"
  redis:
    password: "redis-password"
